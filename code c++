#include<stdio.h>
#include<string.h>
#include<limits.h>
#include<queue>

using namespace std;

int edges[50][50];
int userSum = 0;
int mf;

bool bfs(int source, int destination, int parent[]){
	
	queue <int> qBfs;
	bool visited[50]; 
    memset(visited, 0, sizeof(visited));
    
	qBfs.push(source);
    visited[source] = true;
    parent[source] = -1;
  
    while (!qBfs.empty()){
        int frontNode = qBfs.front();
        qBfs.pop();

		if(frontNode == destination) break;

        for (int i=0; i<=37; i++)
        {
            if (visited[i]==false && edges[frontNode][i] > 0)
            {
                qBfs.push(i);
                parent[i] = frontNode;
                visited[i] = true;
            }
        }
    }

    return visited[destination];
}

int maxFlow(int source, int destination){

	int parent[50];

    int max_flow = 0;

    while (bfs(source, destination, parent)){
        int path_flow = INT_MAX;
        for (int i=destination; i!=source; i=parent[i])
        {
            int curr = parent[i];
            path_flow = min(path_flow, edges[curr][i]);
        }

        for (int i=destination; i!=source; i=parent[i])
        {
            int curr = parent[i];
            edges[curr][i] -= path_flow;
            edges[i][curr] += path_flow;
        }
        max_flow += path_flow;
    }

    return max_flow;
}

int main(){
	
	char app;
	int user;
	char allocation[20] = "__________";
	bool computers[20] = {0};
	memset(edges,0,sizeof(edges));
	
	while(scanf("%c",&app) != EOF){
		
		if(app == '\n'){
				mf = maxFlow(0,37);
				
				if (mf == userSum){
					for(int i=27; i<=36; i++){
				   		bool flag = false;
				    	for(int j=1; j<=27; j++){
				    		if(edges[i][j] == 1)
				     		{
						      printf("%c",char(j+64));
						      flag = true;
						      break;
						    }
						}
				    	if(!flag)
							printf("_");
					}
					printf("\n");
				}
				else{
				  	printf("!\n");
				}
				
				memset(edges,0,sizeof(edges));
				userSum = 0;
		}
		else{
		
			scanf("%d",&user);
			
			edges[0][int(app) - 64] += user;
			
			userSum += user;
			
			char pc[20];
			scanf("%s",pc);
			getchar();
			
			for(int i=0;i<strlen(pc);i++){
				if(pc[i] != ';'){
					int a = pc[i] - '0';
					edges[int(app) - 64][a+27] = 1;
				}
			}
			
			for (int i=27; i<=36; i++){
				//node 37 as sink
				edges[i][37] = 1;
			} 
			
		}
	}
	
		mf = maxFlow(0,37);
				
				if (mf == userSum){
					for(int i=27; i<=36; i++){
				   		bool flag = false;
				    	for(int j=1; j<=27; j++){
				    		if(edges[i][j] == 1)
				     		{
						      printf("%c",char(j+64));
						      flag = true;
						      break;
						    }
						}
				    	if(!flag)
							printf("_");
					}
					printf("\n");
				}
				else{
				  	printf("!\n");
				}
				
				memset(edges,0,sizeof(edges));
				userSum = 0;
	
	return 0;
}
